
	配置class=org.springframework.beans.factory.config.PropertyPlaceholderConfigurer的bean加载properties文件，
	然后用${}通过key获取value。
	
	在任意位置获取HttpServletRequest
		HttpServletRequest hreq=((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
		ApplicationContext ctx = ContextLoader.getCurrentWebApplicationContext();
		/*  老版可以实现applicationcontextaware接口，spring会自动注入applicationcontext属性值。
		ContextLoader是spring用来加载.xml配置文件的工具类（通过web.xml中的ContextLoaderListener加载），所以用它的api可以获取
		加载后的所有信息，包括ApplicationContext  */

配置文件
	cnweb_sa
		加载spring配置文件
			web.xml	
				1.通过上下文参数contextConfigLocation。
				2.通过DispatcherServlet的init-param。
		spring-mvc.xml
			1.context:component-scan：需要扫描的目录。使用注解的类，需要在这些目录下，否则注解不会起作用。
			2.mvc:interceptors：拦截器。
				基本形式
				特殊情况
					1.一个interceptor配多个mvc:mapping。
					2.通过property标签注入属性。
						注入集合属性。
			3.类型自动转换
				mappingJsonHttpMessageConverter
					作用：ajax的dataType设置为json，服务器端返回一个对象，spring会使用类型转换器把这个对象自动转换成json，js端接收到的就是json而不是string。
					如果没有这个转换，就只能是java将对象转换成json，以string形式传给js，js再parse成json。
			
		applicationContext.xml
			用配置文件放参数
				spring配置文件中参数可以放在.properties文件中，用“propertyConfigurer”配置，然后用 “${}” 读参数。
			数据源配置
				
应用上下文（ApplicationContext）
	如何获取？
		1.从xml文件手动创建：ApplicationContext ac = new FileSystemXmlApplicationContext(xmlPath);
		2.通过Spring的工具类WebApplicationContextUtils 获取
	有啥用？
		能手动从Spring获取所需要的bean。
	哪几种？
		4种。spring实战第四版p44。
		AnnotationConfigApplicationContext	从一个或多个基于java的配置类中加载上下文定义，适用于java注解的方式。
		ClassPathXmlApplicationContext	从类路径下的一个或多个xml配置文件中加载上下文定义，适用于xml配置的方式。
		FileSystemXmlApplicationContext	从文件系统下的一个或多个xml配置文件中加载上下文定义，也就是说系统盘符中加载xml配置文件。
		AnnotationConfigWebApplicationContext	专门为web应用准备的，适用于注解方式。
		XmlWebApplicationContext	从web应用下的一个或多个xml配置文件加载上下文定义，适用于xml配置方式。
				
依赖注入
	3种装配方式（可以混用，玖富项目就是混用的）
		1.自动装配&组件扫描。
			首先要启用包扫描（@ComponentScan），然后给需要被扫描到的类加注解(@Component)。在使用的时候加注解（@Autowired）。
			@Component，是最基本的，延申出来了不同的，@Named, @Controller, @Service. 
			@Autowired（属性/构造器/普通的方法 都可以用），@Inject，@Resource。
			
			自动装配的方式
				byName，byType，byConstructor。
				处理歧义性
					1.首选bean：primary。
					2.指定id。
					3.限定符：@Qualifier。
					4.创建自定义限定符。
		2.用java显式装配。
			@Configuration声明配置类（配置类最开始是如何加载的？）。
			@Bean声明返回bean的方法。
			在config类里面直接引用返回bean的方法进行装配。
		3.用xml显式装配。
		4.混合装配
			使用@Import/@InpurtResource/<import resource="">/<bean class="">
	配置多种环境profile
		@Profile
		激活profile：很多种方法，常用的是在DispatcherServlet的初始化参数中配置。
	bean的作用域
		设置：@Scope。默认是单例。
		
	动态装配
		2种方式
		1.${}从属性文件读入
			1.基于javaConfig的注解配置中，可以用@PropertySource(value = { "file:c:/application.properties" })引入配置文件，然后用把key当做变量使用。
			2.在spring的xml配置文件中，用PropertyPlaceholderConfigurer引入配置文件，在xml或者java的注解（如@Value）中可以用${key}引用值。
		2.#{}，spring EL表达式
		
		

	ServiceImpl中需要注入xxxMapper.java属性，可以用@Autowired注入，xxxMapper.java的实现类是xxxMapper.xml，虽然没有@Component进行配置，但是
	还是能被@Autowired自动探测到。
	
各种注解
	@Value("${redis.port}")
		用类似el表达式的方式从配置文件中读取数据，配置文件是applicationContext.xml中使用PropertyPlaceholderConfigurer引入的那些配置文件。
	@Async
		方法所属类上需要加注解@EnableAsync。
		需要配合xml的<task:executor>使用。
		带有这个注解的方法会被异步调用。
	@RequestMapping
		可用于类、方法。
	@ResponseBody/@RequestBody
	表单提交不需要@RequestBody。如果提交的是json字符串，contentType:"application/json"，需要@RequestBody把json字符串映射成参数名-参数值。 
	如果ajax的contentType是“application/json"，需要用@RequestBody。此时request.getParameter("")获取不到参数，只能用流的形式获取一个json形式的字符串。
	如果ajax的contentType是“application/x-www-form-urlencoded"，不需要用@RequestBody，会自动把请求参数封装到对象对应的同名属性。	
	返回值是一个对象，dataType: "json"，需要用@ResponseBody，把对象转换成json字符串。
	
	@RequestParam
		对于enctype="application/x-www-form-urlencoded"提交：
			对于同名参数，不需要这个注解。
			不同名参数，要用这个。
		对于enctype="multipart/form-data"提交：
			无论参数是否同名都要用这个注解
	@PathVariable
		用于restful风格的url。
	
	@resource/@autowired(@Qualifier)/@inject
	@Resource的作用相当于@Autowired，只不过@Autowired按byType自动注入，而@Resource默认按 byName自动注入罢了。
	@Resource有两个属性是比较重要的，分别是name和type，Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。
	所以如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不指定name也不指定type属性，
	这时将通过反射机制使用byName自动注入策略。
　　@Resource装配顺序
　　1. 如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常
　　2. 如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常
　　3. 如果指定了type，则从上下文中找到类型匹配的唯一bean进行装配，找不到或者找到多个，都会抛出异常
　　4. 如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配；
	
	@ExceptionHandler
		能处理同一个controller中被@RequestMapping注解的方法抛出的异常。
	@ControllerAdvice
		用于一个类，处理所有controller中被@RequestMapping注解的方法抛出的异常。
	@InitBinder
		请求参数中如果有日期字符串，有时候后端会报错，需要配置一个格式转换器，可以用@InitBinder。比如cntask项目BaseController里面就用了这个。
		
aop/spring mvc拦截器
	其他的同类型功能：spring mvc拦截器。filter。controllerAdvice。
	
	区别
		拦截对象
			aop配置的是方法。mvc拦截器配置的是url。如果对于service等非url请求，就不能用mvc拦截器了。
		入参
			都可以获取输入参数。
		改变结果
			aop一般不干涉流程。mvc拦截器是用于“拦截”的，经常需要修改response。
	
	oc里面有很多spring mvc拦截器，比如LnAppVerifyQueueAdapter。同一个包下还有其他。
	
	老规矩，可以使用注解或xml配置。@Aspect。
	5种类型。before, after, around, afterReturning, afterThrowing. 
	
	sc：LogAroundAdvice
			around切面。服务调用方需传入appId/cardId，然后这个切面根据传入的appId/cardId生成一个logId，存放在LogFromatManager
			的一个类变量里面，并且这个类变量是ThreadLocal，为每个线程生成一个值。
			后续，可以从LogFromatManager中取出这个logId使用。比如，baseService里面，就写了一个记录scRecordOperation的方法，
			使用了这个logId。
		ChannelAdvice
			功能：用ScRecordOperationService记录接口调用信息。
			使用around切面，执行前获取方法名 类名，执行后获取返回值。

	1.配置声明式事务，使用了aop配置。
	2.配置的切面：
		1）校验url权限。
			PermissionAdvice
				
		2）校验提交的表单参数。
		3）表单提交加token，防止重复提交。
			服务器给前端的token值，包含两部分：1.一个uuid之类的东西，标识这是哪个表单请求的token。2.token_value，具体的token值。
			服务器保存的时候（可以用session或者redis保存），用uuid作为key，token_value作为value保存。
	
	配置方式，用的应该是老式，没有在配置的时候指明切入时机，而是通过实现MethodBeforeAdvice等接口，耦合性过度。
	
	PermissionAdvice
	ValidateAdvice
	SubmitTokenAdvice
		以sa为例。拦截的是所有controller，在request里面存放一个token参数。同时把这个token存放到redis里面。
		前端jsp用自定义的<cn:token>标签接收这个token，并且在提交表单的时候带上这个token，后端controller接收到提交表单请求后，
		如果没有token，就忽略校验（也可以设置成是重复提交）；
		如果有，去redis检查，如果token存在，则是正常提交，并删除token，如果token不存在，则是重复提交。
	
	获取参数
		可以用RequestContextHolder获取request再从中获取参数。
		旧的实现方式，切面的方法会传入Method、Object[]作为参数。
		新的实现方式
			可以用argNames传入指定名字的参数。
			可以用around切面，ProceedingJoinPoint的api（如proceedingJoinPoint.getArgs()）获取参数等信息。
			对于任何类型切面，只需要把JoinPoint jp声明为方法的第一个参数，就能用其api获取所有信息。
			官方解释
				Access to the current JoinPoint
				Any advice method may declare as its first parameter, a parameter of type org.aspectj.lang.JoinPoint 
				(please note that around advice is required to declare a first parameter of type ProceedingJoinPoint, which is a subclass of JoinPoint. 
				The JoinPoint interface provides a number of useful methods such as getArgs() (returns the method arguments), getThis() 
				(returns the proxy object), getTarget() (returns the target object), getSignature() (returns a description of the method that is being advised) 
				and toString() (prints a useful description of the method being advised). Please do consult the javadocs for full details.
		
		after-returning可以获取返回值
			@Aspect
			public class AfterReturningExample {

				@AfterReturning(
					pointcut="com.xyz.myapp.SystemArchitecture.dataAccessOperation()",
					returning="retVal")
				public void doAccessCheck(Object retVal) {
					// ...
				}

			}
		after-throwing可以获取抛出的异常
			@Aspect
			public class AfterThrowingExample {

				@AfterThrowing(
					pointcut="com.xyz.myapp.SystemArchitecture.dataAccessOperation()",
					throwing="ex")
				public void doRecoveryActions(DataAccessException ex) {
					// ...
				}

			}
				
	
	切面
	通知
	切入点
	切入时机
	
mvc
	一次请求的流程（详细）
		请求先到web.xml。在这儿先过 listener filter servlet。对于spring mvc是dispatcherServlet拦截所有的请求（除了静态资源，
		静态资源要配置不过dispatcherServlet），然后dispatcherServlet按照requestMapping分发给对应的controller。
		请求参数有2种形式：1.表单提交的话，会映射给后端同名的参数，如果不同名，用requestParam指定。2.提交的是json字符串，
		后端用requestBody注解调用消息转换器转换成java对象，然后映射给同名属性。
		controller处理完成后，返回结果。两种结果形式：1.视图。返回视图名，视图解析器追加前后缀，形成完整文件路径。
		2.json字符串。用@responseBody注解调用消息转换器，将返回的对象转换成json返回给前端。
		
	消息转换器
		mappingJsonHttpMessageConverter
	视图解析器/view添加前后缀
		viewResolver
	不走DispatcherServlet的资源（静态资源）
		mvc:resources
	@ControllerAdvice
		@InitBinder
			印象中，如果前端提交的日期类型数据（字符串形式），无法自动转换成后端的日期类型，就用@InitBinder注解添加一个转换器
			就可以转换了。
		@ExceptionHandler.
	重定向继续传递参数
		1.url携带参数。
		2.放session里面（request是一次请求一个，没法带到下一个请求，session可以跨越多个请求）。
		3.model.addFlashAttribute。
	
	spring MVC controller与前端互相传递数据的方式
		接收前端传递的数据		
			1.get方法，url拼接参数。
			2.get方法，url的最后一个斜杠后面是参数，用@PathVariable接收。
			3.post方法，表单提交。
				对于用post提交的参数，后端可以：
					1.用默认的映射到同名的变量上。
					2.用@RequestParam显式指定。
					3.用@RequestBody将json字符串转换成java对象的属性里面。-- @RequestBody&@RsponseBody的作用就是调用消息转换器（messageConverters）在json字符串与java对象之间做转换。
			4.js的ajax，post方法，json对象传递数据。
		返回给前端数据
			/** 前端接受返回结果时具体的实现方式：
					// 未测试验证，是2020.7.27看书的时候自己想的，不保证完全正确。
					1.对于返回的视图view，可以不做任何处理，就直接浏览器跳转到另一个界面了。
					2.也可以将整个jsp塞到一个大页面的frame里面（超能系统就是这样）。
					3.也可以先接收jsp，然后从jsp中用${}取出整个对象数据，转成json，再用js填充这些数据。
					4.也可以直接接收json，包括页面的html和数据，用js控制，html用来展示，数据用来填充。
			**/
			1.返回view视图
				1.返回ModelAndView，其构造器参数是jsp路径。通过addObject()添加需要传递的参数，例：
					return new ModelAndView("loan/lnapp/list", "params", gxtParams())
						.addObject("applymen", sj).addObject("productSeriesNames", sj2)
						.addObject("statusType", sj3);
				2.没有@ResponseBody，返回String。
					此时返回的string会被当做jsp路径进行解析。如果配有InternalResourceViewResolver会自动添加前后缀。
			2.返回非视图数据，根据contentType，可以是json数据，也可以是字符串。
				用@ResponseBody，会用messageConverters解析返回的类型。
		
		
事务管理
	属性
		传播规则（事务的边界）
		隔离级别
		只读
		超时
		回滚规则

	声明式
	
	编码式

定时器quartz
	一个学习网站：https://www.w3cschool.cn/quartz_doc/quartz_doc-2put2clm.html
	集群时，如何避免重复执行？
	monitor    applicationContext-quartz.xml
		这个用锁来避免任务的重复执行。用了2种锁：1.redis的分布式锁redisson。2.判断类变量AtomicBoolean的true/false。
		
		配置4个bean
			1.需要执行的bean。
			2.jobDetail。org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean。属性targetObject：需要执行的bean。targetMethod：需要执行的方法。还有其他一些属性。
			3.trigger触发器。org.springframework.scheduling.quartz.CronTriggerFactoryBean。触发器，把上面的jobDetail配进去，并配cron表达式。
			4.scheduler调度器。org.springframework.scheduling.quartz.SchedulerFactoryBean。把所有的trigger触发器配进去。
	
	
拦截器
	spring-mvc.xml中有拦截器。
	
	用法：
		继承HandlerInterceptorAdapter。
		重写preHandle (HttpServletRequest request, HttpServletResponse response, Object handle) 
			postHandle (HttpServletRequest request, HttpServletResponse response, Object handle, ModelAndView modelAndView) 
			afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handle, Exception ex)
	
	拦截后，可以使用response.sendRedirect()跳到其它controller。
	同一个方法配多个拦截器时，链式调用顺序：对于postHandle：先声明的Interceptor 的postHandle 方法反而会后执行。
	可以用response.getWriter().append("abc")修改返回的内容。
	
messageConverters
	controller接收/返回（分别对应AbstractHttpMessageConverter的readInternal、writeInternal）某些类型时，默认的转换可能会出错，需要显式指定一个类型转换器。
	超能指定了两个：
		com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter：支持json和对象的转换。
			如果返回的是一个对象，@ResponseBody会自动用这个转换器转换成json字符串。
			如果接收的是一个json字符串，@RequestBody会自动用这个转换器转换成对象。
		org.springframework.http.converter.StringHttpMessageConverter：支持返回string。
	自定义的话，需要继承适配器AbstractHttpMessageConverter<Object>。
	
简化配置文件
	PropertyPlaceholderConfigurer
		引入.properties配置文件，然后在spring配置文件中可以用${}引用（注解中也可以用${}引用，如@Value）。
		
视图解析器
	InternalResourceViewResolver
	
	返回string时，如何区分返回的是jsp视图还是string字符串？
		如果有@ResponseBody，就不会按视图解析，
		否则，会根据InternalResourceViewResolver将String解析成jsp视图。
		
mongodb
	monitor项目使用了mongodb：spring-mongodb.xml
	
	有两种方式
		1.mongoTemplate
			常规是需要用注解映射java对象和数据库表。-- mybatis是用xml映射。jdbcTemplate可以直接执行sql.
			mongoTemplate.executeCommand()可以执行js脚本。
		2.MongoRepository
	传统的数据库spring可以配置事务，而mongodb也有自己的事务。另外就是注意分布式的时候如何控制mongodb事务。
		
缓存
	使用@EnableCache @Cacheable 等标签。缓存的是方法调用返回的结果。
		
线程池

邮件

测试


	
==================== 官方文档
6 The IoC Container
	6.1 Introduction to the spring IoC container and beans
	6.2 Container overview
	6.3 Bean overview
		Naming beans
		Aliasing a bean outside the bean defination
		Instantiating beans
	6.4 Dependencies
		Dependency Injection
			Constructor-based dependency injection
		Setter-based dependency injection
		Dependency resolution process
		Examples of dependency injection
		Dependencies and configuration in detail









		
		
		
		
		
		